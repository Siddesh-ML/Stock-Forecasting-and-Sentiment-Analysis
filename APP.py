# -*- coding: utf-8 -*-
"""APP_20019619.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TYq7OA5xSYseSCfD9SyDnz-yzIwomffC
"""

import streamlit as st
from keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
import yfinance as yf
import numpy as np
import pandas as pd
import ta
import plotly.graph_objs as go
from datetime import timedelta, datetime

# Load the model
model = load_model('new_gru_model.h5', custom_objects={'mse': lambda y_true, y_pred: np.mean(np.square(y_true - y_pred))})

# Define advanced indicators function
def apply_advanced_indicators(df):
    df['ADX'] = ta.trend.adx(df['High'], df['Low'], df['Close'], window=14)
    df['Bollinger_hband'] = ta.volatility.bollinger_hband(df['Close'], window=20, window_dev=2)
    df['Bollinger_lband'] = ta.volatility.bollinger_lband(df['Close'], window=20, window_dev=2)
    df['Ichimoku_a'] = ta.trend.ichimoku_a(df['High'], df['Low'])
    df['Ichimoku_b'] = ta.trend.ichimoku_b(df['High'], df['Low'])
    df['RSI'] = ta.momentum.rsi(df['Close'], window=14)
    macd = ta.trend.macd(df['Close'], window_slow=26, window_fast=12)
    macd_signal = ta.trend.macd_signal(df['Close'], window_slow=26, window_fast=12, window_sign=9)
    df['MACD'] = macd
    df['MACD_Signal'] = macd_signal
    df['MACD_Hist'] = macd - macd_signal
    df['Stochastic_k'] = ta.momentum.stoch(df['High'], df['Low'], df['Close'], window=14, smooth_window=3)
    df['Stochastic_d'] = ta.momentum.stoch_signal(df['High'], df['Low'], df['Close'], window=14, smooth_window=3)
    return df

# Define dataset creation function
def create_dataset(dataset, time_step=1):
    dataX = []
    for i in range(len(dataset)-time_step-1):
        dataX.append(dataset[i:(i+time_step), 0:dataset.shape[1]-1])
    return np.array(dataX)

# Define the sentiment calculation function based on stock prices
def calculate_sentiment(df):
    df['Daily Return'] = df['Close'].pct_change()
    df['Sentiment'] = df['Daily Return'].apply(lambda x: 1 if x > 0 else -1)
    return df

# Define the home page
def home_page():
    st.title("Bank Stock Prediction and Sentiment Analysis")
    st.write("Welcome to the Bank Stock Prediction and Sentiment Analysis App.")
    st.write("Navigate through the sections using the sidebar to perform various analyses.")

# Define the stock prediction page
def stock_prediction_page():
    st.title('Stock Prediction')
    ticker = st.selectbox('Select a bank stock ticker:', ['HDFCBANK.NS', 'KOTAKBANK.NS', 'ICICIBANK.NS', 'AXISBANK.NS', 'SBIN.NS', 'INDUSINDBK.NS', 'BANDHANBNK.NS', 'IDFCFIRSTB.NS', 'PNB.NS', 'RBLBANK.NS', 'YESBANK.NS', 'FEDERALBNK.NS'])

    if st.button('Predict'):
        data = yf.download(ticker, period='1y')
        data = apply_advanced_indicators(data)
        data = data.dropna()

        feature_cols = ['ADX', 'Bollinger_hband', 'Bollinger_lband', 'Ichimoku_a', 'Ichimoku_b', 'RSI', 'MACD', 'MACD_Signal', 'MACD_Hist', 'Stochastic_k', 'Stochastic_d']
        scaler = MinMaxScaler()
        scaled_data = scaler.fit_transform(data[feature_cols + ['Close']])

        time_step = 100
        X = create_dataset(scaled_data, time_step)
        X = np.reshape(X, (X.shape[0], X.shape[1], len(feature_cols)))

        predictions = model.predict(X)
        predictions = scaler.inverse_transform(np.concatenate([np.zeros((predictions.shape[0], len(feature_cols))), predictions], axis=-1))[:, -1]

        signals = []
        for i in range(1, len(predictions)):
            if predictions[i] > predictions[i-1]:
                signals.append('Buy')
            elif predictions[i] < predictions[i-1]:
                signals.append('Sell')
            else:
                signals.append('Hold')

        st.write(f'Trading signal for {ticker}: {signals[-1]}')

        st.subheader('Stock Price History')
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name='Actual Price'))
        st.plotly_chart(fig)

        st.subheader('Trading Signals')
        fig2 = go.Figure()
        fig2.add_trace(go.Scatter(x=data.index[-len(signals):], y=data['Close'][-len(signals):], mode='lines', name='Actual Price'))
        for i, signal in enumerate(signals):
            color = 'green' if signal == 'Buy' else ('red' if signal == 'Sell' else 'blue')
            fig2.add_trace(go.Scatter(x=[data.index[-len(signals) + i]], y=[data['Close'][-len(signals) + i]], mode='markers', marker=dict(color=color, size=10), name=signal))
        st.plotly_chart(fig2)

# Define the sentiment analysis page
def sentiment_analysis_page():
    st.title('Sentiment Analysis')
    ticker = st.selectbox('Select a bank stock ticker for sentiment analysis:', ['HDFCBANK.NS', 'KOTAKBANK.NS', 'ICICIBANK.NS', 'AXISBANK.NS', 'SBIN.NS', 'INDUSINDBK.NS', 'BANDHANBNK.NS', 'IDFCFIRSTB.NS', 'PNB.NS', 'RBLBANK.NS', 'YESBANK.NS', 'FEDERALBNK.NS'])

    if st.button('Analyze Sentiment'):
        data = yf.download(ticker, period='1y')
        data = calculate_sentiment(data)
        last_5_days = data.tail(5)

        st.subheader('Sentiment Analysis for the Last 5 Days')
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=last_5_days.index,
            y=last_5_days['Sentiment'],
            marker_color=last_5_days['Sentiment'].apply(lambda x: 'green' if x > 0 else 'red'),
        ))
        fig.update_layout(
            title=f'Sentiment Score for {ticker}',
            xaxis_title='Date Time',
            yaxis_title='Sentiment Score',
            yaxis=dict(range=[-1, 1]),
        )
        st.plotly_chart(fig)

        us_tickers = {
            'HDFCBANK.NS': 'HDB',
            'KOTAKBANK.NS': 'KTKBANK',
            'ICICIBANK.NS': 'IBN',
            'AXISBANK.NS': 'AXBKY',
            'SBIN.NS': 'SBKJY',
            'INDUSINDBK.NS': 'INDUSINDB',
            'BANDHANBNK.NS': 'BANDHANBN',
            'IDFCFIRSTB.NS': 'IDFC',
            'PNB.NS': 'PNBK',
            'RBLBANK.NS': 'RBLBANK',
            'YESBANK.NS': 'YESBANK',
            'FEDERALBNK.NS': 'FEDERALBN'
        }

        us_ticker = us_tickers.get(ticker)
        if us_ticker:
            data_us = yf.download(us_ticker, period="1y")
            data_us = calculate_sentiment(data_us)
            last_5_days_us = data_us.tail(5)

            st.subheader(f'Sentiment Analysis for {us_ticker} (U.S. Market) - Last 5 Days')
            fig4 = go.Figure()
            fig4.add_trace(go.Bar(
                x=last_5_days_us.index,
                y=last_5_days_us['Sentiment'],
                marker_color=last_5_days_us['Sentiment'].apply(lambda x: 'green' if x > 0 else 'red'),
            ))
            fig4.update_layout(
                title=f'Sentiment Score for {us_ticker} (U.S. Market)',
                xaxis_title='Date Time',
                yaxis_title='Sentiment Score',
                yaxis=dict(range=[-1, 1]),
            )
            st.plotly_chart(fig4)

# Define navigation
def main():
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Go to", ["Home", "Stock Prediction", "Sentiment Analysis"])

    if page == "Home":
        home_page()
    elif page == "Stock Prediction":
        stock_prediction_page()
    elif page == "Sentiment Analysis":
        sentiment_analysis_page()
if __name__ == "__main__":
    main()